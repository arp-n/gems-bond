BVN\<-function(size,mu1=0,mu2=0,sd1=1,sd2=1,rho=0){ stopifnot(exprs = { sd1\>0 sd2\>0 -1\<=rho rho\<=1} ,local = TRUE)
## Bivariate Normal sample generator
BVN<-function(size,mu1=0,mu2=0,sd1=1,sd2=1,rho=0){
stopifnot(exprs = {
sd1>0
sd2>0
-1<=rho
rho<=1} ,local = TRUE)
z<-rnorm(n=2*size)
sample.mat<-matrix(z,ncol=2)
std.y<-apply(sample.mat,1,simplify = TRUE ,FUN = function(z){
y<-(rho*z[1])+(sqrt(1-rho)*z[2])
return(y)
})
x<-mu1+(sample.mat[,1]*sd1)
y<-mu2+(std.y*sd2)
cbind(x,y)}
sam<-BVN(size=50,rho=-0.73,mu1=0.5,mu2=1.8,sd2=sqrt(2))
cov(sam)
plot(sam)
## Bivariate Normal sample generator
BVN<-function(size,mu1=0,mu2=0,sd1=1,sd2=1,rho=0){
stopifnot(exprs = {
sd1>0
sd2>0
-1<=rho
rho<=1} ,local = TRUE)
z<-rnorm(n=2*size)
sample.mat<-matrix(z,ncol=2)
std.y<-apply(sample.mat,1,simplify = TRUE ,FUN = function(z){
y<-(rho*z[1])+(sqrt(1-rho)*z[2])
return(y)
})
x<-mu1+(sample.mat[,1]*sd1)
y<-mu2+(std.y*sd2)
cbind(x,y)}
sam<-BVN(size=50,rho=-0.73,mu1=0.5,mu2=1.8,sd2=sqrt(2))
plot(sam)
## Bivariate Normal sample generator
BVN<-function(size,mu1=0,mu2=0,sd1=1,sd2=1,rho=0){
stopifnot(exprs = {
sd1>0
sd2>0
-1<=rho
rho<=1} ,local = TRUE)
z<-rnorm(n=2*size)
sample.mat<-matrix(z,ncol=2)
std.y<-apply(sample.mat,1,simplify = TRUE ,FUN = function(z){
y<-(rho*z[1])+(sqrt(1-rho)*z[2])
return(y)
})
x<-mu1+(sample.mat[,1]*sd1)
y<-mu2+(std.y*sd2)
cbind(x,y)}
sam<-BVN(size=500,rho=-0.73,mu1=0.5,mu2=1.8,sd2=sqrt(2))
plot(sam)
BVN<-function(size,mu1=0,mu2=0,sd1=1,sd2=1,rho=0){
stopifnot(exprs = {
sd1>0
sd2>0
-1<=rho
rho<=1} ,local = TRUE)
z<-rnorm(n=2*size)
sample.mat<-matrix(z,ncol=2)
std.y<-apply(sample.mat,1,simplify = TRUE ,FUN = function(z){
y<-(rho*z[1])+(sqrt(1-rho)*z[2])
return(y)
})
x<-mu1+(sample.mat[,1]*sd1)
y<-mu2+(std.y*sd2)
cbind(x,y)}
sam<-BVN(size=500,rho=-0.73,mu1=0.5,mu2=1.8,sd2=sqrt(2))
plot(sam)
BVN<-function(size,mu1=0,mu2=0,sd1=1,sd2=1,rho=0){
stopifnot(exprs = {
sd1>0
sd2>0
-1<=rho
rho<=1} ,local = TRUE)
z<-rnorm(n=2*size)
sample.mat<-matrix(z,ncol=2)
std.y<-apply(sample.mat,1,simplify = TRUE ,FUN = function(z){
y<-(rho*z[1])+(sqrt(1-rho)*z[2])
return(y)
})
x<-mu1+(sample.mat[,1]*sd1)
y<-mu2+(std.y*sd2)
cbind(x,y)}
sam<-BVN(size=500,rho=-0.73,mu1=0.5,mu2=1.8,sd2=sqrt(2))
plot(sam)
sam<-BVN(size=500,rho=-0.73,mu1=0.5,mu2=1.8,sd2=sqrt(2))
plot(sam)
sam<-BVN(size=500,rho=-0.73,mu1=0.5,mu2=1.8,sd2=sqrt(2))
plot(sam,pch=20)
sam<-BVN(size=input(),rho=-0.73,mu1=0.5,mu2=1.8,sd2=sqrt(2))
sam<-BVN(size=500,rho=-0.73,mu1=0.5,mu2=1.8,sd2=sqrt(2))
plot(sam,pch=20,)
sam<-BVN(size=500,rho=-0.73,mu1=0.5,mu2=1.8,sd2=sqrt(2))
plot(sam,pch=20,col='lightgreen')
pulse.before = c(74,80,86,95,92,98,74,77,89,87,95,97,85,83,73,84)
pulse.after = c(65,74,71,73,74,68,75,65,68,69,67,70,71,70.74,66)
t.test(pulse.after,pulse.before,var.equal = T)
?t.test
t.test(pulse.after,pulse.before,var.equal = T,paired = T, conf.level = T)
pulse.before = c(74,80,86,95,92,98,74,77,89,87,95,97,85,83,73,84)
pulse.after = c(65,74,71,73,74,68,75,65,68,69,67,70,71,70.74,66)
t.test(pulse.after,pulse.before,var.equal = T,paired = T, conf.level = T)
length(pulse.after)
length(pulse.before)
pulse.before = c(74,80,86,95,92,98,74,77,89,87,95,97,85,83,73,84)
pulse.after = c(65,74,71,73,74,68,75,65,68,69,67,70,71,70,74,66)
length(pulse.before)
t.test(pulse.after,pulse.before,var.equal = T,paired = T, conf.level = T)
t.test(pulse.after,pulse.before,var.equal = T,paired = T, conf.level = 0.98)
square.root<-function(x,tol = 1e-6){
r = x/2 ;iter = 0
while(abs(r^2 - x) > tol){
r = mean(r,x/r)
iter = iter + 1
}
list(x, iter)
}
square.root(5)
square.root(2)
square.root<-function(x,tol = 1e-6){
r = x/2 ;iter = 0
while(abs(x - r^2) > tol){
r = mean(r,x/r)
iter = iter + 1
}
list(x, iter)
}
square.root(2)
square.root(4)
square.root(9)
square.root<-function(x,tol = 1e-6){
r = x/2 ;iter = 0
while(abs(x - r^2) > tol){
r = mean(r,x/r)
iter = iter + 1
}
list(r, iter)
}
square.root(9)
square.root(4)
square.root(5)
square.root<-function(x,tol = 0.01){
r = x/2 ;iter = 0
while(abs(x - r^2) > tol){
r = mean(r,x/r)
iter = iter + 1
}
list(r, iter)
}
square.root(5)
tol = 0.01
x = 25
r = x/2 ;iter = 0
while(abs(x - r^2) > tol){
r = mean(r,x/r)
iter = iter + 1
}
r
tol = 0e-6
tol
tol = 0.00001
tol
tol = 1e-6
tol
x = 25
r = x/2 ;iter = 0
while(abs(x - r^2) > tol){
r = mean(r,x/r)
iter = iter + 1
}
x = 25
r = x/2
while(abs(x - r^2) > tol){
r = mean(r,x/r)
}
x = 25
r = x/2
while(abs(x - r^2) < tol){
r = mean(r,x/r)
}
r
x = 2
x = 2
r = x/2
while(abs(x - r^2) < tol){
r = mean(r,x/r)
}
r
x = 2
r = x/2
while(abs(x - r^2) > tol){
r = (r + x/r)/2
}
r
square.root<-function(x ,tol = 1e-6){
r = x/2 ; iter = 0
while(abs(x - r^2) > tol){
r = (r + x/r)/2
iter = iter + 1
}
list(r , iter)
}
square.root(5)
square.root(25)
square.root(0.001)
square.root(100)
square.root<-function(x ,tol = 1e-6){
r = x/2 ; iter = 0
while(abs(x - r^2) > tol){
r = (r + x/r)/2
iter = iter + 1
}
list(x.sqrt = r ,n.iter = iter)
}
square.root(9)
square.root(2, tol=1e-4)
square.root(2, tol=1e-4)
square.root(4, tol=1e-4)
square.root(10, tol=1e-4)
square.root(11 tol=1e-4)
square.root(11, tol=1e-4)
square.root.vector<-function(x ,tol = 1e-6){
r = NULL
for(i in 1:length(x)){
r[i] = x[i]/2 ; iter = 0
while(abs(x[i] - r[i]^2) > tol){
r[i] = (r[i] + x[i]/r)/2
iter = iter + 1
}}
list(x.sqrt = r ,n.iter = iter)
}
square.root.vector(2,4,10,11)
square.root.vector(c(2,4,10,11))
square.root.vector<-function(x ,tol = 1e-6){
r = NULL; iter = NULL
for(i in 1:length(x)){
r[i] = x[i]/2 ; iter[i] = 0
while(abs(x[i] - r[i]^2) > tol){
r[i] = (r[i] + x[i]/r)/2
iter[i] = iter[i] + 1
}}
list(x.sqrt = r ,n.iter = iter)
}
square.root.vector(c(2,4,10,11))
square.root.vector<-function(x ,tol = 1e-6){
r = NULL; iter = NULL
for(i in 1:length(x)){
r[i] = x[i]/2 ; iter[i] = 0
while(abs(x[i] - r[i]^2) > tol){
r[i] = (r[i] + x[i]/r)/2
iter[i] = iter[i] + 1
}}
r
}
square.root.vector(c(2,4,10,11))
square.root.vector<-function(x ,tol = 1e-6){
r = NULL; iter = NULL
for(i in 1:length(x)){
r[i] = x[i]/2 ; iter[i] = 0
while(abs(x[i] - r[i]^2) > tol){
r[i] = (r[i] + x[i]/r[i])/2
iter[i] = iter[i] + 1
}}
r
}
square.root.vector(c(2,4,10,11))
square.root.vector<-function(x ,tol = 1e-6){
r = NULL; iter = NULL
for(i in 1:length(x)){
r[i] = x[i]/2 ; iter[i] = 0
while(abs(x[i] - r[i]^2) > tol){
r[i] = (r[i] + x[i]/r[i])/2
iter[i] = iter[i] + 1
}}
list(x.sqrt = r. n.iter = iter)
square.root.vector<-function(x ,tol = 1e-6){
r = NULL; iter = NULL
for(i in 1:length(x)){
r[i] = x[i]/2 ; iter[i] = 0
while(abs(x[i] - r[i]^2) > tol){
r[i] = (r[i] + x[i]/r[i])/2
iter[i] = iter[i] + 1
}}
list(x.sqrt = r, n.iter = iter)
}
square.root.vector(c(2,4,10,11))
x<- rnorm(50, mean = 5)
alt.mu<- seq(5,10,by=0.01)
x.vec<-matrix(rnorm(50*10),nrow = 50)
alt.mu<- seq(5,10,by=0.01)
set.seed(100);prob=NULL; j=1;
for ( c in alt.mu)
{
prob[j]=0
for(i in 1:100)
{
x=rnorm(50, mean = 5)
me=median(x)
if(me>c) prob[j]=prob[j]+1
}
prob[j]=prob[j]/100
j=j+1
}
plot(C,prob,type="l"); abline(h=0.9,col="red");
alt.mu<- seq(5,10,by=0.01)
set.seed(100);prob=NULL; j=1;
for ( c in alt.mu)
{
prob[j]=0
for(i in 1:100)
{
x=rnorm(50, mean = 5)
me=median(x)
if(me>c) prob[j]=prob[j]+1
}
prob[j]=prob[j]/100
j=j+1
}
plot(C,prob,type="l"); abline(h=0.9,col="red");
set.seed(100);prob=NULL; j=1;
C=seq(0.2,0.9,by=0.001)
for ( c in C)
{
prob[j]=0
for(i in 1:100)
{
x=rnorm(50, mean = 5)
me=median(x)
if(me>c) prob[j]=prob[j]+1
}
prob[j]=prob[j]/100
j=j+1
}
plot(C,prob,type="l"); abline(h=0.9,col="red");
prob
set.seed(100);prob=NULL; j=1;
C=seq(0.2,0.9,by=0.001)
for (c in C)
{
prob[j]=0
for(i in 1:100)
{
x=rnorm(50, mean = 5)
me=median(x)
if(me>c) prob[j]=prob[j]+1
}
prob[j]=prob[j]/100
j=j+1
}
plot(C,prob,type="l"); abline(h=0.9,col="red");
prob
